(window["webpackJsonp"] = window["webpackJsonp"] || []).push([[62],{

/***/ "./src/coins/ripple.js":
/*!*****************************!*\
  !*** ./src/coins/ripple.js ***!
  \*****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(Buffer) {module.exports = async function () {\n  const keypairs = await Promise.all(/*! import() */[__webpack_require__.e(1), __webpack_require__.e(2), __webpack_require__.e(3), __webpack_require__.e(5), __webpack_require__.e(4), __webpack_require__.e(47), __webpack_require__.e(50)]).then(__webpack_require__.t.bind(null, /*! ripple-keypairs */ \"./node_modules/ripple-keypairs/dist/index.js\", 7));\n  const Coin = await __webpack_require__.e(/*! import() */ 12).then(__webpack_require__.t.bind(null, /*! ./coin */ \"./src/coins/coin.js\", 7));\n  const elliptic = await Promise.all(/*! import() */[__webpack_require__.e(3), __webpack_require__.e(21)]).then(__webpack_require__.t.bind(null, /*! elliptic */ \"./node_modules/elliptic/lib/elliptic.js\", 7));\n  const Ed25519 = elliptic.eddsa(\"ed25519\");\n  const Secp256k1 = elliptic.ec(\"secp256k1\");\n  return class Ripple extends Coin {\n    constructor(name, donate) {\n      super(name, donate);\n    }\n\n    create(d, Q, opts) {\n      const seed = keypairs.generateSeed({\n        entropy: d.toBuffer()\n      });\n      const kp = keypairs.deriveKeypair(seed);\n      kp.seed = seed;\n      return kp;\n    }\n\n    makeRandom(opts) {\n      const seed = keypairs.generateSeed();\n      const kp = keypairs.deriveKeypair(seed);\n      kp.seed = seed;\n      return kp;\n    }\n\n    isPrivateKey(key) {\n      try {\n        // seed\n        keypairs.deriveKeypair(key);\n        return true;\n      } catch (e) {}\n\n      key = `${key}`.toLowerCase();\n\n      if (/(?:00|ed)[0-9a-f]{64}/.test(key)) {\n        return true;\n      }\n\n      return false;\n    }\n\n    decodePrivateKey(key) {\n      try {\n        // seed\n        const kp = keypairs.deriveKeypair(key);\n        kp.seed = key;\n        return kp;\n      } catch (e) {}\n\n      key = `${key}`.toLowerCase();\n\n      if (/(?:00|ed)[0-9a-f]{64}/.test(key)) {\n        return {\n          privateKey: key,\n          publicKey: this.privateToPublic(key)\n        };\n      }\n\n      return false;\n    } // correspond to getAddressFormatNames, getAddressTitleNames\n\n\n    getAddressWith(key, mode) {\n      switch (mode) {\n        default:\n          return keypairs.deriveAddress(key.publicKey);\n      }\n    } // correspond to getAddressFormatNames, getAddressTitleNames\n\n\n    getWIFForAddress(key, mode) {\n      switch (mode) {\n        default:\n          return key.seed || key.privateKey;\n      }\n    } // correspond to getWIFTitleNames\n\n\n    getWIFByType(key, mode) {\n      switch (mode) {\n        case 0:\n          return key.privateKey;\n\n        default:\n          return key.seed || key.privateKey;\n      }\n    }\n\n    getAddressFormatNames(key) {\n      return [\"Normal\", \"Hex\", \"Seed\"];\n    }\n\n    getAddressTitleNames(key) {\n      return [\"Public Address\"];\n    }\n\n    getWIFTitleNames(key) {\n      return [\"Raw hex\", \"Seed\"];\n    }\n\n    getPublicKey(key, compressed) {\n      return Buffer.from(key.publicKey, \"hex\");\n    }\n\n    getPrivateKeyBuffer(key) {\n      return Buffer.from(key.privateKey, \"hex\");\n    }\n\n    havePrivateKey(key) {\n      return !!(key.seed || key.privateKey);\n    }\n\n    privateToPublic(privateKey) {\n      privateKey = `${privateKey}`.toLowerCase();\n\n      if (privateKey.startsWith(\"00\")) {\n        return Buffer.from(Secp256k1.keyFromPrivate(privateKey.slice(2)).getPublic().encodeCompressed()).toString(\"hex\");\n      } else if (privateKey.startsWith(\"ed\")) {\n        return Buffer.from(Ed25519.keyFromPrivate(privateKey.slice(2)).getPublic().encodeCompressed()).toString(\"hex\");\n      }\n    }\n\n    isUnsure() {\n      return true;\n    }\n\n  };\n}();\n\nmodule.exports.__esModule = true;\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../node_modules/node-libs-browser/node_modules/buffer/index.js */ \"./node_modules/node-libs-browser/node_modules/buffer/index.js\").Buffer))\n\n//# sourceURL=webpack:///./src/coins/ripple.js?");

/***/ })

}]);