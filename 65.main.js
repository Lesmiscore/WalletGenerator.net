(window["webpackJsonp"] = window["webpackJsonp"] || []).push([[65],{

/***/ "./src/coins/zcash/z-address.js":
/*!**************************************!*\
  !*** ./src/coins/zcash/z-address.js ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(Buffer) {module.exports = async function () {\n  const Coin = await __webpack_require__.e(/*! import() */ 12).then(__webpack_require__.t.bind(null, /*! ../coin */ \"./src/coins/coin.js\", 7));\n  const zWallet = await Promise.all(/*! import() */[__webpack_require__.e(1), __webpack_require__.e(2), __webpack_require__.e(3), __webpack_require__.e(5), __webpack_require__.e(6), __webpack_require__.e(7), __webpack_require__.e(48), __webpack_require__.e(39)]).then(__webpack_require__.t.bind(null, /*! ./_z-wallet */ \"./src/coins/zcash/_z-wallet.js\", 7));\n  const bs58check = await Promise.all(/*! import() */[__webpack_require__.e(1), __webpack_require__.e(2), __webpack_require__.e(46)]).then(__webpack_require__.t.bind(null, /*! bs58check */ \"./node_modules/bs58check/index.js\", 7));\n  return class ZcashZ extends Coin {\n    constructor(name, spendingKey, viewingKey, address, donate) {\n      super(name, donate);\n      this.network = {\n        spendingKey: Buffer.from(spendingKey),\n        viewingKey: Buffer.from(viewingKey),\n        address: Buffer.from(address)\n      };\n    }\n    /**\n     * Create a keypair from specific scalar\n     * @param {bigi} d Scalar value from \"bigi\" package\n     * @param {null} Q Unused, used to be public key\n     * @param {object} opts Options to be passed\n     *  */\n\n\n    create(d, Q, opts) {\n      return zWallet.createSpendingKeyFromBuffer(this.network, d.toBuffer());\n    }\n    /**\n     * Create a random keypair\n     * @param {object} opts Options to be passed\n     *  */\n\n\n    makeRandom(opts) {\n      return zWallet.createSpendingKey(this.network);\n    }\n    /**\n     * Check if a given key is a valid private key string\n     * @param {string} key Possible private key\n     *  */\n\n\n    isPrivateKey(key) {\n      return true;\n    }\n    /**\n     * Decode private key string into keypair\n     * @param {string} key Private key string\n     *  */\n\n\n    decodePrivateKey(key) {\n      return key;\n    } // correspond to getAddressFormatNames, getAddressTitleNames\n\n    /**\n     * Calculate an address from keypair\n     * Mode number correspond to index of arrays returned from getAddressFormatNames and getAddressTitleNames\n     * @param {object} key Keypair\n     * @param {number} mode Mode number\n     *  */\n\n\n    getAddressWith(key, mode) {\n      switch (mode || 0) {\n        default:\n        case 0:\n          // Address\n          return zWallet.convertSpendingKeyToAddress(key, this.network);\n\n        case 1:\n          // Viewing Key\n          return zWallet.convertSpendingKeyToViewingKey(key, this.network);\n      }\n    } // correspond to getAddressFormatNames, getAddressTitleNames\n\n    /**\n     * Convert private key string from keypair\n     * Mode number correspond to index of arrays returned from getAddressFormatNames and getAddressTitleNames\n     * @param {object} key Keypair\n     * @param {number} mode Mode number\n     *  */\n\n\n    getWIFForAddress(key, mode) {\n      return key;\n    } // correspond to getWIFTitleNames\n\n    /**\n     * Convert private key string from keypair\n     * Mode number correspond to index of arrays returned from getWIFTitleNames\n     * @param {object} key Keypair\n     * @param {number} mode Mode number\n     *  */\n\n\n    getWIFByType(key, mode) {\n      return key;\n    }\n    /**\n     * Used at address mode dropdown\n     * */\n\n\n    getAddressFormatNames() {\n      return [\"Payment Address\", \"Viewing Key\"];\n    }\n    /**\n     * Used at Single Wallet tab and public part of Detail Wallet tab\n     * */\n\n\n    getAddressTitleNames() {\n      return [\"Payment Address\", \"Viewing Key\"];\n    }\n    /**\n     * Used at private part of Detail Wallet tab\n     * */\n\n\n    getWIFTitleNames() {\n      return [\"Spending Key\"];\n    }\n    /**\n     * Get public key from keypair\n     * @param {object} key Keypair\n     * @param {boolean} compressed Is a compressed public key?\n     * */\n\n\n    getPublicKey(key, compressed) {\n      return Buffer.allocUnsafe(0);\n    }\n    /**\n     * Get private key Buffer value from keypair\n     * @param {object} key Keypair\n     * */\n\n\n    getPrivateKeyBuffer(key) {\n      return bs58check.decode(key).slice(2);\n    }\n    /**\n     * Does the keypair has private key?\n     * @param {object} key Keypair\n     * */\n\n\n    havePrivateKey(key) {\n      return true;\n    }\n    /**\n     * Check patten is valid for vanitygen, return true if pattern can be a beginning of any address.\n     * @param {string} pattern Possible partial address\n     * @param {number} mode Mode number corresponding to index of arrays returned from getAddressFormatNames and getAddressTitleNames\n     * */\n\n\n    isVanitygenPossible(pattern, mode) {\n      return false;\n    }\n\n    shouldAddCoinList() {\n      return false;\n    }\n\n  };\n}();\n\nmodule.exports.__esModule = true;\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../node_modules/node-libs-browser/node_modules/buffer/index.js */ \"./node_modules/node-libs-browser/node_modules/buffer/index.js\").Buffer))\n\n//# sourceURL=webpack:///./src/coins/zcash/z-address.js?");

/***/ })

}]);