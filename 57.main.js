(window["webpackJsonp"] = window["webpackJsonp"] || []).push([[57],{

/***/ "./src/coins/bitcoincash.js":
/*!**********************************!*\
  !*** ./src/coins/bitcoincash.js ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("module.exports = async function () {\n  const Bitcoin = await Promise.all(/*! import() */[__webpack_require__.e(0), __webpack_require__.e(22)]).then(__webpack_require__.t.bind(null, /*! ./bitcoin */ \"./src/coins/bitcoin.js\", 7));\n  const bitcoin = await Promise.all(/*! import() */[__webpack_require__.e(1), __webpack_require__.e(0), __webpack_require__.e(2), __webpack_require__.e(3), __webpack_require__.e(5), __webpack_require__.e(6), __webpack_require__.e(7), __webpack_require__.e(4), __webpack_require__.e(8), __webpack_require__.e(10), __webpack_require__.e(11), __webpack_require__.e(17)]).then(__webpack_require__.t.bind(null, /*! bitgo-utxo-lib */ \"./node_modules/bitgo-utxo-lib/src/index.js\", 7));\n  const bchaddrjs = await Promise.all(/*! import() */[__webpack_require__.e(1), __webpack_require__.e(0), __webpack_require__.e(2), __webpack_require__.e(44), __webpack_require__.e(52)]).then(__webpack_require__.t.bind(null, /*! bchaddrjs */ \"./node_modules/bchaddrjs/src/bchaddr.js\", 7));\n  const constants = await Promise.all(/*! import() */[__webpack_require__.e(0), __webpack_require__.e(29)]).then(__webpack_require__.t.bind(null, /*! ./constants */ \"./src/coins/constants.js\", 7));\n  return class BitcoinCash extends Bitcoin {\n    constructor(name, networkVersion, privateKeyPrefix, donate) {\n      super(name, networkVersion, privateKeyPrefix, donate, undefined, undefined, bitcoin.coins.BCH);\n    }\n\n    getAddressWith(btcKey, mode) {\n      const compressed = btcKey.compressed;\n\n      try {\n        let legacy;\n\n        switch (mode || 0) {\n          case 0:\n            // compressed\n            btcKey.compressed = true;\n            return bitcoin.ECPair.prototype.getAddress.call(btcKey);\n\n          case 1:\n            // uncompressed\n            btcKey.compressed = false;\n            return bitcoin.ECPair.prototype.getAddress.call(btcKey);\n\n          case 2:\n            // cashaddr (compressed)\n            legacy = this.getAddressWith(btcKey, 0);\n            return bchaddrjs.toCashAddress(legacy).split(\":\")[1];\n\n          case 3:\n            // cashaddr (uncompressed)\n            legacy = this.getAddressWith(btcKey, 1);\n            return bchaddrjs.toCashAddress(legacy).split(\":\")[1];\n        }\n\n        return this.getAddressWith(btcKey, 0);\n      } finally {\n        btcKey.compressed = compressed;\n      }\n    }\n\n    getWIFWith(btcKey, mode) {\n      const compressed = btcKey.compressed;\n\n      try {\n        switch (mode) {\n          case 1: // uncompressed\n\n          case 3:\n            // cashaddr (uncompressed)\n            btcKey.compressed = false;\n            break;\n\n          default:\n            // other\n            btcKey.compressed = true;\n            break;\n        }\n\n        return btcKey.toWIF();\n      } finally {\n        btcKey.compressed = compressed;\n      }\n    }\n\n    getAddressFormatNames() {\n      return [\"Compressed\", \"Uncompressed\", // no segwit\n      \"CashAddress (Compressed)\", \"CashAddress (Uncompressed)\"];\n    }\n\n    getAddressTitleNames() {\n      return [\"Public Address Compressed\", \"Public Address\", // no segwit\n      \"CashAddress (Compressed)\", \"CashAddress (Uncompressed)\"];\n    }\n\n    isVanitygenPossible(pattern, mode) {\n      const btcB58 = \"[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]+$\";\n\n      function testBase58(version) {\n        const headRegex = constants.bitcoinB58Leading[version];\n        const regex = new RegExp(`^${headRegex}${btcB58}`);\n        return regex.test(pattern);\n      }\n\n      function testBase32() {\n        const regex = /^(?:bitcoincash:)?q[abcdefghijklmnopqrstuvwxyz234567]{0,41}$/;\n        return regex.test(pattern);\n      }\n\n      switch (mode || 0) {\n        default:\n        case 0: // compressed\n\n        case 1:\n          // uncompressed\n          return testBase58(this.network.pubKeyHash);\n\n        case 2: // cashaddr (compressed)\n\n        case 3:\n          // cashaddr (uncompressed)\n          return testBase32();\n      }\n    }\n\n    testVanitygenMatch(pattern, address, mode) {\n      pattern = pattern.replace(/^bitcoincash:/, \"\");\n      address = address.replace(/^bitcoincash:/, \"\");\n      return address.startsWith(pattern);\n    }\n\n  };\n}();\n\nmodule.exports.__esModule = true;\n\n//# sourceURL=webpack:///./src/coins/bitcoincash.js?");

/***/ })

}]);